// Generated by gencpp from file rftest/Mobility.msg
// DO NOT EDIT!


#ifndef RFTEST_MESSAGE_MOBILITY_H
#define RFTEST_MESSAGE_MOBILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rftest
{
template <class ContainerAllocator>
struct Mobility_
{
  typedef Mobility_<ContainerAllocator> Type;

  Mobility_()
    : left(0)
    , right(0)
    , j1(0)
    , j2(0)
    , j3(0)
    , j4(0)
    , j51(0)
    , j52(0)
    , mode(0)  {
    }
  Mobility_(const ContainerAllocator& _alloc)
    : left(0)
    , right(0)
    , j1(0)
    , j2(0)
    , j3(0)
    , j4(0)
    , j51(0)
    , j52(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef int32_t _left_type;
  _left_type left;

   typedef int32_t _right_type;
  _right_type right;

   typedef int32_t _j1_type;
  _j1_type j1;

   typedef int32_t _j2_type;
  _j2_type j2;

   typedef int32_t _j3_type;
  _j3_type j3;

   typedef int32_t _j4_type;
  _j4_type j4;

   typedef int32_t _j51_type;
  _j51_type j51;

   typedef int32_t _j52_type;
  _j52_type j52;

   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::rftest::Mobility_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rftest::Mobility_<ContainerAllocator> const> ConstPtr;

}; // struct Mobility_

typedef ::rftest::Mobility_<std::allocator<void> > Mobility;

typedef boost::shared_ptr< ::rftest::Mobility > MobilityPtr;
typedef boost::shared_ptr< ::rftest::Mobility const> MobilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rftest::Mobility_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rftest::Mobility_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rftest

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rftest': ['/home/ggrabuskie/catkin_ws/src/rftest/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rftest::Mobility_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rftest::Mobility_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rftest::Mobility_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rftest::Mobility_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rftest::Mobility_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rftest::Mobility_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rftest::Mobility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f33d1055a48448022b44b1ff8e17fe19";
  }

  static const char* value(const ::rftest::Mobility_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf33d1055a4844802ULL;
  static const uint64_t static_value2 = 0x2b44b1ff8e17fe19ULL;
};

template<class ContainerAllocator>
struct DataType< ::rftest::Mobility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rftest/Mobility";
  }

  static const char* value(const ::rftest::Mobility_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rftest::Mobility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 left\n\
int32 right\n\
int32 j1\n\
int32 j2\n\
int32 j3\n\
int32 j4\n\
int32 j51\n\
int32 j52\n\
int32 mode\n\
";
  }

  static const char* value(const ::rftest::Mobility_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rftest::Mobility_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.j4);
      stream.next(m.j51);
      stream.next(m.j52);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mobility_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rftest::Mobility_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rftest::Mobility_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right);
    s << indent << "j1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j3);
    s << indent << "j4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j4);
    s << indent << "j51: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j51);
    s << indent << "j52: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j52);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFTEST_MESSAGE_MOBILITY_H
